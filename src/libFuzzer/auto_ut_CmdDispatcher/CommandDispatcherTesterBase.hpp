// ======================================================================
// \title  CommandDispatcherTesterBase.hpp
// \author Generated by fpp-to-cpp
// \brief  hpp file for CommandDispatcher component test harness base class
// ======================================================================

#ifndef Svc_CommandDispatcherTesterBase_HPP
#define Svc_CommandDispatcherTesterBase_HPP

#include <cstdio>

#include "F-Prime/Svc/CmdDispatcher/CommandDispatcherComponentAc.hpp"
#include "Fw/Comp/PassiveComponentBase.hpp"
#include "Fw/Port/InputSerializePort.hpp"
#include "Fw/Types/Assert.hpp"
#include "Fw/Types/ExternalString.hpp"

namespace Svc {

  //! \class CommandDispatcherTesterBase
  //! \brief Auto-generated base for CommandDispatcher component test harness
  class CommandDispatcherTesterBase :
    public Fw::PassiveComponentBase
  {

    protected:

      // ----------------------------------------------------------------------
      // History class
      // ----------------------------------------------------------------------

      //! \class History
      //! \brief A history of port inputs
      //!
      template<typename T>
      class History
      {

        public:

          //! Create a History
          History(
             const U32 maxSize //!< The maximum history size
          ) :
            numEntries(0),
            maxSize(maxSize)
          {
            this->entries = new T[maxSize];
          }

          //! Destroy a History
          ~History()
          {
            delete[] this->entries;
          }

          //! Clear the history
          //!
          void clear()
          {
            this->numEntries = 0;
          }

          //! Push an item onto the history
          //!
          void push_back(
              const T& entry //!< The item
          )
          {
            FW_ASSERT(this->numEntries < this->maxSize);
            entries[this->numEntries++] = entry;
          }

          //! Get an item at an index
          //!
          //! \return The item at index i
          const T& at(
              const U32 i //!< The index
          ) const
          {
            FW_ASSERT(i < this->numEntries);
            return entries[i];
          }

          //! Get the number of entries in the history
          //!
          //! \return The number of entries in the history
          U32 size() const
          {
            return this->numEntries;
          }

        private:

          //! The number of entries in the history
          U32 numEntries;

          //! The maximum history size
          const U32 maxSize;

          //! The entries
          T* entries;

      };

    protected:

      // ----------------------------------------------------------------------
      // History types
      // ----------------------------------------------------------------------

      //! A history entry for port from_compCmdSend
      struct FromPortEntry_compCmdSend {
        FromPortEntry_compCmdSend() :
          opCode(),
          cmdSeq(),
          args()
        {}
        FwOpcodeType opCode;
        U32 cmdSeq;
        Fw::CmdArgBuffer args;
      };

      //! A history entry for port from_pingOut
      struct FromPortEntry_pingOut {
        FromPortEntry_pingOut() :
          key()
        {}
        U32 key;
      };

      //! A history entry for port from_seqCmdStatus
      struct FromPortEntry_seqCmdStatus {
        FromPortEntry_seqCmdStatus() :
          opCode(),
          cmdSeq(),
          response()
        {}
        FwOpcodeType opCode;
        U32 cmdSeq;
        Fw::CmdResponse response;
      };

      //! A type representing a command response
      struct CmdResponse {
        FwOpcodeType opCode;
        U32 cmdSeq;
        Fw::CmdResponse response;
      };

#if FW_ENABLE_TEXT_LOGGING

      //! A history entry for text log events
      struct TextLogEntry {
        U32 id;
        Fw::Time timeTag;
        Fw::LogSeverity severity;
        Fw::TextLogString text;
      };

#endif

      //! A history entry for event OpCodeRegistered
      struct EventEntry_OpCodeRegistered {
        U32 Opcode;
        I32 port;
        I32 slot;
      };

      //! A history entry for event OpCodeDispatched
      struct EventEntry_OpCodeDispatched {
        U32 Opcode;
        I32 port;
      };

      //! A history entry for event OpCodeCompleted
      struct EventEntry_OpCodeCompleted {
        U32 Opcode;
      };

      //! A history entry for event OpCodeError
      struct EventEntry_OpCodeError {
        U32 Opcode;
        Fw::CmdResponse error;
      };

      //! A history entry for event MalformedCommand
      struct EventEntry_MalformedCommand {
        Fw::DeserialStatus Status;
      };

      //! A history entry for event InvalidCommand
      struct EventEntry_InvalidCommand {
        U32 Opcode;
      };

      //! A history entry for event TooManyCommands
      struct EventEntry_TooManyCommands {
        U32 Opcode;
      };

      //! A history entry for event NoOpStringReceived
      struct EventEntry_NoOpStringReceived {
        Fw::LogStringArg message;
      };

      //! A history entry for event TestCmd1Args
      struct EventEntry_TestCmd1Args {
        I32 arg1;
        F32 arg2;
        U8 arg3;
      };

      //! A history entry for event OpCodeReregistered
      struct EventEntry_OpCodeReregistered {
        U32 Opcode;
        I32 port;
      };

      //! A history entry for telemetry channel CommandsDispatched
      struct TlmEntry_CommandsDispatched {
        Fw::Time timeTag;
        U32 arg;
      };

      //! A history entry for telemetry channel CommandErrors
      struct TlmEntry_CommandErrors {
        Fw::Time timeTag;
        U32 arg;
      };

    public:

      // ----------------------------------------------------------------------
      // Component initialization
      // ----------------------------------------------------------------------

      //! Initialize object CommandDispatcherTesterBase
      virtual void init(
          FwEnumStoreType instance = 0 //!< The instance number
      );

    public:

      // ----------------------------------------------------------------------
      // Connectors for to ports
      // ----------------------------------------------------------------------

      //! Connect port to CmdDisp[portNum]
      void connect_to_CmdDisp(
          FwIndexType portNum, //!< The port number
          Fw::InputCmdPort* port //!< The input port
      );

      //! Connect port to compCmdReg[portNum]
      void connect_to_compCmdReg(
          FwIndexType portNum, //!< The port number
          Fw::InputCmdRegPort* port //!< The input port
      );

      //! Connect port to compCmdStat[portNum]
      void connect_to_compCmdStat(
          FwIndexType portNum, //!< The port number
          Fw::InputCmdResponsePort* port //!< The input port
      );

      //! Connect port to pingIn[portNum]
      void connect_to_pingIn(
          FwIndexType portNum, //!< The port number
          Svc::InputPingPort* port //!< The input port
      );

      //! Connect port to seqCmdBuff[portNum]
      void connect_to_seqCmdBuff(
          FwIndexType portNum, //!< The port number
          Fw::InputComPort* port //!< The input port
      );

    public:

      // ----------------------------------------------------------------------
      // Getters for from ports
      // ----------------------------------------------------------------------

      //! Get from port at index
      //!
      //! \return from_CmdReg[portNum]
      Fw::InputCmdRegPort* get_from_CmdReg(
          FwIndexType portNum //!< The port number
      );

      //! Get from port at index
      //!
      //! \return from_CmdStatus[portNum]
      Fw::InputCmdResponsePort* get_from_CmdStatus(
          FwIndexType portNum //!< The port number
      );

      //! Get from port at index
      //!
      //! \return from_Log[portNum]
      Fw::InputLogPort* get_from_Log(
          FwIndexType portNum //!< The port number
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Get from port at index
      //!
      //! \return from_LogText[portNum]
      Fw::InputLogTextPort* get_from_LogText(
          FwIndexType portNum //!< The port number
      );

#endif

      //! Get from port at index
      //!
      //! \return from_Time[portNum]
      Fw::InputTimePort* get_from_Time(
          FwIndexType portNum //!< The port number
      );

      //! Get from port at index
      //!
      //! \return from_Tlm[portNum]
      Fw::InputTlmPort* get_from_Tlm(
          FwIndexType portNum //!< The port number
      );

      //! Get from port at index
      //!
      //! \return from_compCmdSend[portNum]
      Fw::InputCmdPort* get_from_compCmdSend(
          FwIndexType portNum //!< The port number
      );

      //! Get from port at index
      //!
      //! \return from_pingOut[portNum]
      Svc::InputPingPort* get_from_pingOut(
          FwIndexType portNum //!< The port number
      );

      //! Get from port at index
      //!
      //! \return from_seqCmdStatus[portNum]
      Fw::InputCmdResponsePort* get_from_seqCmdStatus(
          FwIndexType portNum //!< The port number
      );

    protected:

      // ----------------------------------------------------------------------
      // Component construction and destruction
      // ----------------------------------------------------------------------

      //! Construct object CommandDispatcherTesterBase
      CommandDispatcherTesterBase(
          const char* const compName, //!< The component name
          const U32 maxHistorySize //!< The maximum size of each history
      );

      //! Destroy object CommandDispatcherTesterBase
      virtual ~CommandDispatcherTesterBase();

    protected:

      // ----------------------------------------------------------------------
      // Default handler implementations for typed from ports
      // You can override these implementation with more specific behavior
      // ----------------------------------------------------------------------

      //! Default handler implementation for from_compCmdSend
      virtual void from_compCmdSend_handler(
          FwIndexType portNum, //!< The port number
          FwOpcodeType opCode, //!< Command Op Code
          U32 cmdSeq, //!< Command Sequence
          Fw::CmdArgBuffer& args //!< Buffer containing arguments
      );

      //! Default handler implementation for from_pingOut
      virtual void from_pingOut_handler(
          FwIndexType portNum, //!< The port number
          U32 key //!< Value to return to pinger
      );

      //! Default handler implementation for from_seqCmdStatus
      virtual void from_seqCmdStatus_handler(
          FwIndexType portNum, //!< The port number
          FwOpcodeType opCode, //!< Command Op Code
          U32 cmdSeq, //!< Command Sequence
          const Fw::CmdResponse& response //!< The command response argument
      );

    protected:

      // ----------------------------------------------------------------------
      // Handler base-class functions for from ports
      // ----------------------------------------------------------------------

      //! Handler base-class function for from_compCmdSend
      void from_compCmdSend_handlerBase(
          FwIndexType portNum, //!< The port number
          FwOpcodeType opCode, //!< Command Op Code
          U32 cmdSeq, //!< Command Sequence
          Fw::CmdArgBuffer& args //!< Buffer containing arguments
      );

      //! Handler base-class function for from_pingOut
      void from_pingOut_handlerBase(
          FwIndexType portNum, //!< The port number
          U32 key //!< Value to return to pinger
      );

      //! Handler base-class function for from_seqCmdStatus
      void from_seqCmdStatus_handlerBase(
          FwIndexType portNum, //!< The port number
          FwOpcodeType opCode, //!< Command Op Code
          U32 cmdSeq, //!< Command Sequence
          const Fw::CmdResponse& response //!< The command response argument
      );

    protected:

      // ----------------------------------------------------------------------
      // Invocation functions for to ports
      // ----------------------------------------------------------------------

      //! Invoke the to port connected to compCmdReg
      void invoke_to_compCmdReg(
          FwIndexType portNum, //!< The port number
          FwOpcodeType opCode //!< Command Op Code
      );

      //! Invoke the to port connected to compCmdStat
      void invoke_to_compCmdStat(
          FwIndexType portNum, //!< The port number
          FwOpcodeType opCode, //!< Command Op Code
          U32 cmdSeq, //!< Command Sequence
          const Fw::CmdResponse& response //!< The command response argument
      );

      //! Invoke the to port connected to pingIn
      void invoke_to_pingIn(
          FwIndexType portNum, //!< The port number
          U32 key //!< Value to return to pinger
      );

      //! Invoke the to port connected to seqCmdBuff
      void invoke_to_seqCmdBuff(
          FwIndexType portNum, //!< The port number
          Fw::ComBuffer& data, //!< Buffer containing packet data
          U32 context //!< Call context value; meaning chosen by user
      );

    protected:

      // ----------------------------------------------------------------------
      // Getters for port counts
      // ----------------------------------------------------------------------

      //! Get the number of to_CmdDisp ports
      //!
      //! \return The number of to_CmdDisp ports
      FwIndexType getNum_to_CmdDisp() const;

      //! Get the number of to_compCmdReg ports
      //!
      //! \return The number of to_compCmdReg ports
      FwIndexType getNum_to_compCmdReg() const;

      //! Get the number of to_compCmdStat ports
      //!
      //! \return The number of to_compCmdStat ports
      FwIndexType getNum_to_compCmdStat() const;

      //! Get the number of to_pingIn ports
      //!
      //! \return The number of to_pingIn ports
      FwIndexType getNum_to_pingIn() const;

      //! Get the number of to_seqCmdBuff ports
      //!
      //! \return The number of to_seqCmdBuff ports
      FwIndexType getNum_to_seqCmdBuff() const;

      //! Get the number of from_CmdReg ports
      //!
      //! \return The number of from_CmdReg ports
      FwIndexType getNum_from_CmdReg() const;

      //! Get the number of from_CmdStatus ports
      //!
      //! \return The number of from_CmdStatus ports
      FwIndexType getNum_from_CmdStatus() const;

      //! Get the number of from_Log ports
      //!
      //! \return The number of from_Log ports
      FwIndexType getNum_from_Log() const;

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Get the number of from_LogText ports
      //!
      //! \return The number of from_LogText ports
      FwIndexType getNum_from_LogText() const;

#endif

      //! Get the number of from_Time ports
      //!
      //! \return The number of from_Time ports
      FwIndexType getNum_from_Time() const;

      //! Get the number of from_Tlm ports
      //!
      //! \return The number of from_Tlm ports
      FwIndexType getNum_from_Tlm() const;

      //! Get the number of from_compCmdSend ports
      //!
      //! \return The number of from_compCmdSend ports
      FwIndexType getNum_from_compCmdSend() const;

      //! Get the number of from_pingOut ports
      //!
      //! \return The number of from_pingOut ports
      FwIndexType getNum_from_pingOut() const;

      //! Get the number of from_seqCmdStatus ports
      //!
      //! \return The number of from_seqCmdStatus ports
      FwIndexType getNum_from_seqCmdStatus() const;

    protected:

      // ----------------------------------------------------------------------
      // Connection status queries for to ports
      // ----------------------------------------------------------------------

      //! Check whether port to_CmdDisp is connected
      //!
      //! \return Whether port to_CmdDisp is connected
      bool isConnected_to_CmdDisp(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port to_compCmdReg is connected
      //!
      //! \return Whether port to_compCmdReg is connected
      bool isConnected_to_compCmdReg(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port to_compCmdStat is connected
      //!
      //! \return Whether port to_compCmdStat is connected
      bool isConnected_to_compCmdStat(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port to_pingIn is connected
      //!
      //! \return Whether port to_pingIn is connected
      bool isConnected_to_pingIn(
          FwIndexType portNum //!< The port number
      );

      //! Check whether port to_seqCmdBuff is connected
      //!
      //! \return Whether port to_seqCmdBuff is connected
      bool isConnected_to_seqCmdBuff(
          FwIndexType portNum //!< The port number
      );

    protected:

      // ----------------------------------------------------------------------
      // Functions for testing commands
      // ----------------------------------------------------------------------

      //! Handle a command response
      virtual void cmdResponseIn(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdResponse response //!< The command response
      );

      //! Send command buffers directly (used for intentional command encoding errors)
      void sendRawCmd(
          FwOpcodeType opCode, //!< The opcode
          U32 cmdSeq, //!< The command sequence number
          Fw::CmdArgBuffer& buf //!< The command argument buffer
      );

      //! Send a CMD_NO_OP command
      void sendCmd_CMD_NO_OP(
          const FwEnumStoreType instance, //!< The instance number
          U32 cmdSeq //!< The command sequence number
      );

      //! Send a CMD_NO_OP_STRING command
      void sendCmd_CMD_NO_OP_STRING(
          const FwEnumStoreType instance, //!< The instance number
          U32 cmdSeq, //!< The command sequence number
          const Fw::StringBase& arg1 //!< The String command argument
      );

      //! Send a CMD_TEST_CMD_1 command
      void sendCmd_CMD_TEST_CMD_1(
          const FwEnumStoreType instance, //!< The instance number
          U32 cmdSeq, //!< The command sequence number
          I32 arg1, //!< The I32 command argument
          F32 arg2, //!< The F32 command argument
          U8 arg3 //!< The U8 command argument
      );

      //! Send a CMD_CLEAR_TRACKING command
      void sendCmd_CMD_CLEAR_TRACKING(
          const FwEnumStoreType instance, //!< The instance number
          U32 cmdSeq //!< The command sequence number
      );

    protected:

      // ----------------------------------------------------------------------
      // Functions for testing events
      // ----------------------------------------------------------------------

      //! Dispatch an event
      void dispatchEvents(
          FwEventIdType id, //!< The event ID
          const Fw::Time& timeTag, //!< The time
          const Fw::LogSeverity severity, //!< The severity
          Fw::LogBuffer& args //!< The serialized arguments
      );

#if FW_ENABLE_TEXT_LOGGING

      //! Handle a text event
      virtual void textLogIn(
          FwEventIdType id, //!< The event ID
          const Fw::Time& timeTag, //!< The time
          const Fw::LogSeverity severity, //!< The severity
          const Fw::TextLogString& text //!< The event string
      );

#endif

      //! Handle event OpCodeRegistered
      virtual void logIn_DIAGNOSTIC_OpCodeRegistered(
          U32 Opcode, //!< The opcode to register
          I32 port, //!< The registration port
          I32 slot //!< The dispatch slot it was placed in
      );

      //! Handle event OpCodeDispatched
      virtual void logIn_COMMAND_OpCodeDispatched(
          U32 Opcode, //!< The opcode dispatched
          I32 port //!< The port dispatched to
      );

      //! Handle event OpCodeCompleted
      virtual void logIn_COMMAND_OpCodeCompleted(
          U32 Opcode //!< The I32 command argument
      );

      //! Handle event OpCodeError
      virtual void logIn_COMMAND_OpCodeError(
          U32 Opcode, //!< The opcode with the error
          Fw::CmdResponse error //!< The error value
      );

      //! Handle event MalformedCommand
      virtual void logIn_WARNING_HI_MalformedCommand(
          Fw::DeserialStatus Status //!< The deserialization error
      );

      //! Handle event InvalidCommand
      virtual void logIn_WARNING_HI_InvalidCommand(
          U32 Opcode //!< Invalid opcode
      );

      //! Handle event TooManyCommands
      virtual void logIn_WARNING_HI_TooManyCommands(
          U32 Opcode //!< The opcode that overflowed the list
      );

      //! Handle event NoOpReceived
      virtual void logIn_ACTIVITY_HI_NoOpReceived();

      //! Handle event NoOpStringReceived
      virtual void logIn_ACTIVITY_HI_NoOpStringReceived(
          const Fw::StringBase& message //!< The NO-OP string that is generated
      );

      //! Handle event TestCmd1Args
      virtual void logIn_ACTIVITY_HI_TestCmd1Args(
          I32 arg1, //!< Arg1
          F32 arg2, //!< Arg2
          U8 arg3 //!< Arg3
      );

      //! Handle event OpCodeReregistered
      virtual void logIn_DIAGNOSTIC_OpCodeReregistered(
          U32 Opcode, //!< The opcode reregistered
          I32 port //!< The reregistration port
      );

    protected:

      // ----------------------------------------------------------------------
      // Functions for testing telemetry
      // ----------------------------------------------------------------------

      //! Dispatch telemetry
      void dispatchTlm(
          FwChanIdType id, //!< The channel id
          const Fw::Time& timeTag, //!< The time
          Fw::TlmBuffer& val //!< The channel value
      );

      //! Handle channel CommandsDispatched
      void tlmInput_CommandsDispatched(
          const Fw::Time& timeTag, //!< The time
          const U32 val //!< The channel value
      );

      //! Handle channel CommandErrors
      void tlmInput_CommandErrors(
          const Fw::Time& timeTag, //!< The time
          const U32 val //!< The channel value
      );

    protected:

      // ----------------------------------------------------------------------
      // Functions to test time
      // ----------------------------------------------------------------------

      //! Set the test time for events and telemetry
      void setTestTime(
          const Fw::Time& timeTag //!< The time
      );

    protected:

      // ----------------------------------------------------------------------
      // History functions
      // ----------------------------------------------------------------------

      //! Clear all history
      void clearHistory();

      //! Clear from port history
      void clearFromPortHistory();

      //! Push an entry on the history for from_compCmdSend
      void pushFromPortEntry_compCmdSend(
          FwOpcodeType opCode, //!< Command Op Code
          U32 cmdSeq, //!< Command Sequence
          Fw::CmdArgBuffer& args //!< Buffer containing arguments
      );

      //! Push an entry on the history for from_pingOut
      void pushFromPortEntry_pingOut(
          U32 key //!< Value to return to pinger
      );

      //! Push an entry on the history for from_seqCmdStatus
      void pushFromPortEntry_seqCmdStatus(
          FwOpcodeType opCode, //!< Command Op Code
          U32 cmdSeq, //!< Command Sequence
          const Fw::CmdResponse& response //!< The command response argument
      );

      //! Clear event history
      void clearEvents();

#if FW_ENABLE_TEXT_LOGGING

      //! Print a text log history entry
      static void printTextLogHistoryEntry(
          const TextLogEntry& e,
          FILE* file
      );

      //! Print the text log history
      void printTextLogHistory(FILE* const file);

#endif

      //! Clear telemetry history
      void clearTlm();

    private:

      // ----------------------------------------------------------------------
      // Static functions for output ports
      // ----------------------------------------------------------------------

      //! Static function for port from_CmdReg
      static void from_CmdReg_static(
          Fw::PassiveComponentBase* const callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          FwOpcodeType opCode //!< Command Op Code
      );

      //! Static function for port from_CmdStatus
      static void from_CmdStatus_static(
          Fw::PassiveComponentBase* const callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          FwOpcodeType opCode, //!< Command Op Code
          U32 cmdSeq, //!< Command Sequence
          const Fw::CmdResponse& response //!< The command response argument
      );

      //! Static function for port from_Log
      static void from_Log_static(
          Fw::PassiveComponentBase* const callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          FwEventIdType id, //!< Log ID
          Fw::Time& timeTag, //!< Time Tag
          const Fw::LogSeverity& severity, //!< The severity argument
          Fw::LogBuffer& args //!< Buffer containing serialized log entry
      );

#if FW_ENABLE_TEXT_LOGGING == 1

      //! Static function for port from_LogText
      static void from_LogText_static(
          Fw::PassiveComponentBase* const callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          FwEventIdType id, //!< Log ID
          Fw::Time& timeTag, //!< Time Tag
          const Fw::LogSeverity& severity, //!< The severity argument
          Fw::TextLogString& text //!< Text of log message
      );

#endif

      //! Static function for port from_Time
      static void from_Time_static(
          Fw::PassiveComponentBase* const callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          Fw::Time& time //!< Reference to Time object
      );

      //! Static function for port from_Tlm
      static void from_Tlm_static(
          Fw::PassiveComponentBase* const callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          FwChanIdType id, //!< Telemetry Channel ID
          Fw::Time& timeTag, //!< Time Tag
          Fw::TlmBuffer& val //!< Buffer containing serialized telemetry value
      );

      //! Static function for port from_compCmdSend
      static void from_compCmdSend_static(
          Fw::PassiveComponentBase* const callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          FwOpcodeType opCode, //!< Command Op Code
          U32 cmdSeq, //!< Command Sequence
          Fw::CmdArgBuffer& args //!< Buffer containing arguments
      );

      //! Static function for port from_pingOut
      static void from_pingOut_static(
          Fw::PassiveComponentBase* const callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          U32 key //!< Value to return to pinger
      );

      //! Static function for port from_seqCmdStatus
      static void from_seqCmdStatus_static(
          Fw::PassiveComponentBase* const callComp, //!< The component instance
          FwIndexType portNum, //!< The port number
          FwOpcodeType opCode, //!< Command Op Code
          U32 cmdSeq, //!< Command Sequence
          const Fw::CmdResponse& response //!< The command response argument
      );

    protected:

      // ----------------------------------------------------------------------
      // History member variables
      // ----------------------------------------------------------------------

      //! The total number of port entries
      U32 fromPortHistorySize;

      //! The history for from_compCmdSend
      History<FromPortEntry_compCmdSend>* fromPortHistory_compCmdSend;

      //! The history for from_pingOut
      History<FromPortEntry_pingOut>* fromPortHistory_pingOut;

      //! The history for from_seqCmdStatus
      History<FromPortEntry_seqCmdStatus>* fromPortHistory_seqCmdStatus;

      //! The command response history
      History<CmdResponse>* cmdResponseHistory;

      //! The total number of events seen
      U32 eventsSize;

#if FW_ENABLE_TEXT_LOGGING

      //! The history of text log events
      History<TextLogEntry>* textLogHistory;

#endif

      //! The history of OpCodeRegistered events
      History<EventEntry_OpCodeRegistered>* eventHistory_OpCodeRegistered;

      //! The history of OpCodeDispatched events
      History<EventEntry_OpCodeDispatched>* eventHistory_OpCodeDispatched;

      //! The history of OpCodeCompleted events
      History<EventEntry_OpCodeCompleted>* eventHistory_OpCodeCompleted;

      //! The history of OpCodeError events
      History<EventEntry_OpCodeError>* eventHistory_OpCodeError;

      //! The history of MalformedCommand events
      History<EventEntry_MalformedCommand>* eventHistory_MalformedCommand;

      //! The history of InvalidCommand events
      History<EventEntry_InvalidCommand>* eventHistory_InvalidCommand;

      //! The history of TooManyCommands events
      History<EventEntry_TooManyCommands>* eventHistory_TooManyCommands;

      //! Size of history for event NoOpReceived
      U32 eventsSize_NoOpReceived;

      //! The history of NoOpStringReceived events
      History<EventEntry_NoOpStringReceived>* eventHistory_NoOpStringReceived;

      //! The history of TestCmd1Args events
      History<EventEntry_TestCmd1Args>* eventHistory_TestCmd1Args;

      //! The history of OpCodeReregistered events
      History<EventEntry_OpCodeReregistered>* eventHistory_OpCodeReregistered;

      //! The total number of telemetry inputs seen
      U32 tlmSize;

      //! The history of CommandsDispatched values
      History<TlmEntry_CommandsDispatched>* tlmHistory_CommandsDispatched;

      //! The history of CommandErrors values
      History<TlmEntry_CommandErrors>* tlmHistory_CommandErrors;

    private:

      // ----------------------------------------------------------------------
      // To ports
      // ----------------------------------------------------------------------

      //! To port connected to CmdDisp
      Fw::OutputCmdPort m_to_CmdDisp[1];

      //! To port connected to compCmdReg
      Fw::OutputCmdRegPort m_to_compCmdReg[30];

      //! To port connected to compCmdStat
      Fw::OutputCmdResponsePort m_to_compCmdStat[1];

      //! To port connected to pingIn
      Svc::OutputPingPort m_to_pingIn[1];

      //! To port connected to seqCmdBuff
      Fw::OutputComPort m_to_seqCmdBuff[5];

    private:

      // ----------------------------------------------------------------------
      // From ports
      // ----------------------------------------------------------------------

      //! From port connected to CmdReg
      Fw::InputCmdRegPort m_from_CmdReg[1];

      //! From port connected to CmdStatus
      Fw::InputCmdResponsePort m_from_CmdStatus[1];

      //! From port connected to Log
      Fw::InputLogPort m_from_Log[1];

#if FW_ENABLE_TEXT_LOGGING == 1

      //! From port connected to LogText
      Fw::InputLogTextPort m_from_LogText[1];

#endif

      //! From port connected to Time
      Fw::InputTimePort m_from_Time[1];

      //! From port connected to Tlm
      Fw::InputTlmPort m_from_Tlm[1];

      //! From port connected to compCmdSend
      Fw::InputCmdPort m_from_compCmdSend[30];

      //! From port connected to pingOut
      Svc::InputPingPort m_from_pingOut[1];

      //! From port connected to seqCmdStatus
      Fw::InputCmdResponsePort m_from_seqCmdStatus[5];

    private:

      // ----------------------------------------------------------------------
      // Time variables
      // ----------------------------------------------------------------------

      //! Test time stamp
      Fw::Time m_testTime;

  };

}

#endif
